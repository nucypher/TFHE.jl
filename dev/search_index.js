var documenterSearchIndex = {"docs":
[{"location":"api.html#API-reference-1","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api.html#","page":"API reference","title":"API reference","text":"CurrentModule = TFHE","category":"page"},{"location":"api.html#Keys-1","page":"API reference","title":"Keys","text":"","category":"section"},{"location":"api.html#","page":"API reference","title":"API reference","text":"SchemeParameters\ntfhe_parameters\nSecretKey\nCloudKey\nmake_key_pair","category":"page"},{"location":"api.html#TFHE.SchemeParameters","page":"API reference","title":"TFHE.SchemeParameters","text":"TFHE scheme parameters (single- or multi- party).\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.tfhe_parameters","page":"API reference","title":"TFHE.tfhe_parameters","text":"tfhe_parameters(; tlwe_mask_size::Int=1)\n\nCreates a single-party SchemeParameters object to pass to SecretKey.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.SecretKey","page":"API reference","title":"TFHE.SecretKey","text":"SecretKey(rng::AbstractRNG, params::SchemeParameters)\n\nA TFHE secret key, used for encryption/decryption. Currently the only official way to get an object to pass to params is from tfhe_parameters.\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.CloudKey","page":"API reference","title":"TFHE.CloudKey","text":"CloudKey(rng::AbstractRNG, secret_key::SecretKey)\n\nA TFHE cloud (public) key, used for secure computations by a third party.\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.make_key_pair","page":"API reference","title":"TFHE.make_key_pair","text":"make_key_pair(rng::AbstractRNG, params::Union{Nothing, SchemeParameters}=nothing)\n\nCreates a pair of SecretKey and a corresponding CloudKey. If params is nothing, the default return value of tfhe_parameters is used.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Encryption/decryption-1","page":"API reference","title":"Encryption/decryption","text":"","category":"section"},{"location":"api.html#","page":"API reference","title":"API reference","text":"encrypt\ndecrypt\nLweSample","category":"page"},{"location":"api.html#TFHE.encrypt","page":"API reference","title":"TFHE.encrypt","text":"encrypt(rng::AbstractRNG, key::SecretKey, message::Bool)\n\nEncrypts a plaintext bit. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.decrypt","page":"API reference","title":"TFHE.decrypt","text":"decrypt(key::SecretKey, sample::LweSample)\n\nDecrypts an encrypted bit. Returns a boolean.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.LweSample","page":"API reference","title":"TFHE.LweSample","text":"A structure representing an encrypted bit.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Logical-gates-1","page":"API reference","title":"Logical gates","text":"","category":"section"},{"location":"api.html#","page":"API reference","title":"API reference","text":"gate_nand\ngate_or\ngate_and\ngate_xor\ngate_xnor\ngate_not\ngate_constant\ngate_nor\ngate_andny\ngate_andyn\ngate_orny\ngate_oryn\ngate_mux","category":"page"},{"location":"api.html#TFHE.gate_nand","page":"API reference","title":"TFHE.gate_nand","text":"gate_nand(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the NAND gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_or","page":"API reference","title":"TFHE.gate_or","text":"gate_or(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the OR gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_and","page":"API reference","title":"TFHE.gate_and","text":"gate_and(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the AND gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_xor","page":"API reference","title":"TFHE.gate_xor","text":"gate_xor(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the XOR gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_xnor","page":"API reference","title":"TFHE.gate_xnor","text":"gate_xnor(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the XNOR gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_not","page":"API reference","title":"TFHE.gate_not","text":"gate_not(ck::CloudKey, x::LweSample)\n\nApplies the NOT gate to an encrypted bit x. Returns a LweSample object. Does not need to be bootstrapped.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_constant","page":"API reference","title":"TFHE.gate_constant","text":"gate_constant(ck::CloudKey, value::Bool)\n\nReturns a LweSample object representing the plaintext value.\n\nnote: Note\nThe returned object is suitable to use with other gates, but it is not encrypted.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_nor","page":"API reference","title":"TFHE.gate_nor","text":"gate_nor(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the NOR gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_andny","page":"API reference","title":"TFHE.gate_andny","text":"gate_andny(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the ANDNY (ANDNY(x, y) == AND(NOT(x), y)) gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_andyn","page":"API reference","title":"TFHE.gate_andyn","text":"gate_andyn(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the ANDYN (ANDYN(x, y) == AND(x, NOT(y))) gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_orny","page":"API reference","title":"TFHE.gate_orny","text":"gate_orny(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the ORNY (ORNY(x, y) == OR(NOT(x), y)) gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_oryn","page":"API reference","title":"TFHE.gate_oryn","text":"gate_oryn(ck::CloudKey, x::LweSample, y::LweSample)\n\nApplies the ORYN (ORYN(x, y) == OR(x, NOT(y))) gate to encrypted bits x and y. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.gate_mux","page":"API reference","title":"TFHE.gate_mux","text":"gate_mux(ck::CloudKey, x::LweSample, y::LweSample, z::LweSample)\n\nApplies the MUX (MUX(x, y, z) == x ? y : z == OR(AND(x, y), AND(NOT(x), z))) gate to encrypted bits x, y and z. Returns a LweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Multi-key-TFHE-(experimental)-1","page":"API reference","title":"Multi-key TFHE (experimental)","text":"","category":"section"},{"location":"api.html#","page":"API reference","title":"API reference","text":"mktfhe_parameters_2party\nmktfhe_parameters_4party\nmktfhe_parameters_8party\nSharedKey\nCloudKeyPart\nMKCloudKey\nmk_encrypt\nmk_decrypt\nMKLweSample\nmk_gate_nand","category":"page"},{"location":"api.html#TFHE.mktfhe_parameters_2party","page":"API reference","title":"TFHE.mktfhe_parameters_2party","text":"Multi-key TFHE parameters for 2 parties (a SchemeParameters object).\n\n\n\n\n\n","category":"constant"},{"location":"api.html#TFHE.mktfhe_parameters_4party","page":"API reference","title":"TFHE.mktfhe_parameters_4party","text":"Multi-key TFHE parameters for 4 parties (a SchemeParameters object).\n\n\n\n\n\n","category":"constant"},{"location":"api.html#TFHE.mktfhe_parameters_8party","page":"API reference","title":"TFHE.mktfhe_parameters_8party","text":"Multi-key TFHE parameters for 8 parties (a SchemeParameters object).\n\n\n\n\n\n","category":"constant"},{"location":"api.html#TFHE.SharedKey","page":"API reference","title":"TFHE.SharedKey","text":"SharedKey(rng::AbstractRNG, params::SchemeParameters)\n\nA shared key created by the server. params is one of mktfhe_parameters_2party, mktfhe_parameters_4party, mktfhe_parameters_8party.\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.CloudKeyPart","page":"API reference","title":"TFHE.CloudKeyPart","text":"CloudKeyPart(rng, secret_key::SecretKey, shared_key::SharedKey)\n\nA part of the cloud (computation) key generated independently by each party (since it involves their secret keys). The secret_key is a SecretKey object created with the same parameter set as the SharedKey object.\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.MKCloudKey","page":"API reference","title":"TFHE.MKCloudKey","text":"MKCloudKey(ck_parts::Array{CloudKeyPart, 1})\n\nA full cloud key generated on the server out of parties' cloud key parts.\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.mk_encrypt","page":"API reference","title":"TFHE.mk_encrypt","text":"mk_encrypt(rng, secret_keys::Array{SecretKey, 1}, message::Bool)\n\nEncrypts a plaintext bit using parties' secret keys. Returns a MKLweSample object.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.mk_decrypt","page":"API reference","title":"TFHE.mk_decrypt","text":"mk_decrypt(secret_keys::Array{SecretKey, 1}, sample::MKLweSample)\n\nDecrypts an encrypted bit using parties' secret keys. Returns a boolean.\n\n\n\n\n\n","category":"function"},{"location":"api.html#TFHE.MKLweSample","page":"API reference","title":"TFHE.MKLweSample","text":"A structure representing an encrypted bit in multi-key TFHE.\n\n\n\n\n\n","category":"type"},{"location":"api.html#TFHE.mk_gate_nand","page":"API reference","title":"TFHE.mk_gate_nand","text":"mk_gate_nand(ck::MKCloudKey, x::MKLweSample, y::MKLweSample)\n\nApplies the NAND gate to encrypted bits x and y. Returns a MKLweSample object.\n\n\n\n\n\n","category":"function"},{"location":"history.html#Version-history-1","page":"Version history","title":"Version history","text":"","category":"section"},{"location":"history.html#v0.1.0-1","page":"Version history","title":"v0.1.0","text":"","category":"section"},{"location":"history.html#","page":"Version history","title":"Version history","text":"Initial version.","category":"page"},{"location":"manual.html#Manual-1","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"For more detailed examples see examples/tutorial.jl, examples/multikey.jl and test/runtests.jl.","category":"page"},{"location":"manual.html#A-simple-example-1","page":"Manual","title":"A simple example","text":"","category":"section"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"TFHE works on separate bits and has all the common logical gates defined for encrypted bits: AND, OR, NAND and so on. Each gate is bootstrapped, so the error of any ciphertext is always small enough for it to be decrypted, and bootstrapping never has to be called explicitly.","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"In this simple example we will create two vectors of encrypted bits and run them through a XOR gate. First, we create the secret key (used for encryption and decryption) and the cloud key (as follows from the name, used for secure computation by a third party).","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"using TFHE\nusing Random\n\nrng = MersenneTwister(123)\nsecret_key, cloud_key = make_key_pair(rng)","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"Then we encrypt two short vectors of booleans.","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"bits1 = [false, true, false, true]\nbits2 = [false, false, true, true]\n\nciphertext1 = encrypt.(Ref(rng), secret_key, bits1)\nciphertext2 = encrypt.(Ref(rng), secret_key, bits2)","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"XOR gate is applied on encrypted bits using the cloud key.","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"cresult = gate_xor.(cloud_key, ciphertext1, ciphertext2)\n","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"Calculate the reference result and check that the decryption coincides with it.","category":"page"},{"location":"manual.html#","page":"Manual","title":"Manual","text":"reference = xor.(bits1, bits2)\nresult = decrypt.(secret_key, cresult)\n@assert result == reference","category":"page"},{"location":"index.html#TFHE-1","page":"Home","title":"TFHE","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"TFHE.jl is a Julia port of:","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"TFHE (https://github.com/tfhe/tfhe), based on I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène, \"Faster Fully Homomorphic Encryption: Bootstrapping in Less Than 0.1 Seconds\";\nMKFTHE (https://github.com/ilachill/MK-TFHE), based on H. Chen, I. Chillotti, and Y. Song, \"Multi-Key Homomophic Encryption from TFHE\".","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"The implementation if focused primarily on clarity and conciseness, not on performance.","category":"page"}]
}
